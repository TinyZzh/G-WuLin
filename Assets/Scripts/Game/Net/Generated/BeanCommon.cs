// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeanCommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.OkraAx.V3 {

  /// <summary>Holder for reflection information generated from BeanCommon.proto</summary>
  public static partial class BeanCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for BeanCommon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBCZWFuQ29tbW9uLnByb3RvEg1vcmcub2tyYUF4LnYzGgtBeEFueS5wcm90",
            "byJYCghVc2VySW5mbxILCgN1aWQYASABKAMSDAoEbmFtZRgCIAEoCRIOCgZm",
            "aWd1cmUYAyABKAUSIQoDZXh0GAQgASgLMhQub3JnLm9rcmFBeC52My5BeEFu",
            "eSIgChFMb2dTZXJ2ZXJJbmZvQmVhbhILCgN1cmwYASABKAkiRAoTUmVwb3J0",
            "Q2xpZW50TG9nQmVhbhItCgRsaXN0GAEgAygLMh8ub3JnLm9rcmFBeC52My5D",
            "bGllbnRMb2dNZXNzYWdlIrcBChBDbGllbnRMb2dNZXNzYWdlEj0KB2NvbnRl",
            "eHQYASADKAsyLC5vcmcub2tyYUF4LnYzLkNsaWVudExvZ01lc3NhZ2UuQ29u",
            "dGV4dEVudHJ5EhAKCGxvZ0xldmVsGAIgASgFEg8KB21lc3NhZ2UYAyABKAkS",
            "EQoJdGhyb3dhYmxlGAQgASgJGi4KDENvbnRleHRFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBQi0KGm9yZy5va3JhQXgudjMuYmVhbnMu",
            "Y29tbW9uQgtHcGNCbkNvbW1vbkgBUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Org.OkraAx.V3.AxAnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.UserInfo), global::Org.OkraAx.V3.UserInfo.Parser, new[]{ "Uid", "Name", "Figure", "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.LogServerInfoBean), global::Org.OkraAx.V3.LogServerInfoBean.Parser, new[]{ "Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ReportClientLogBean), global::Org.OkraAx.V3.ReportClientLogBean.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ClientLogMessage), global::Org.OkraAx.V3.ClientLogMessage.Parser, new[]{ "Context", "LogLevel", "Message", "Throwable" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///    用户信息
  /// </summary>
  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.OkraAx.V3.BeanCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      figure_ = other.figure_;
      Ext = other.ext_ != null ? other.Ext.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    /// <summary>
    ///   角色 唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///   角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figure" field.</summary>
    public const int FigureFieldNumber = 3;
    private int figure_;
    /// <summary>
    ///   形象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Figure {
      get { return figure_; }
      set {
        figure_ = value;
      }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 4;
    private global::Org.OkraAx.V3.AxAny ext_;
    /// <summary>
    ///   扩展数据 - 战绩等等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.OkraAx.V3.AxAny Ext {
      get { return ext_; }
      set {
        ext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Figure != other.Figure) return false;
      if (!object.Equals(Ext, other.Ext)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Figure != 0) hash ^= Figure.GetHashCode();
      if (ext_ != null) hash ^= Ext.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Figure != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Figure);
      }
      if (ext_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Figure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Figure);
      }
      if (ext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Figure != 0) {
        Figure = other.Figure;
      }
      if (other.ext_ != null) {
        if (ext_ == null) {
          ext_ = new global::Org.OkraAx.V3.AxAny();
        }
        Ext.MergeFrom(other.Ext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Figure = input.ReadInt32();
            break;
          }
          case 34: {
            if (ext_ == null) {
              ext_ = new global::Org.OkraAx.V3.AxAny();
            }
            input.ReadMessage(ext_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///   日志服务器信息bean
  /// </summary>
  public sealed partial class LogServerInfoBean : pb::IMessage<LogServerInfoBean> {
    private static readonly pb::MessageParser<LogServerInfoBean> _parser = new pb::MessageParser<LogServerInfoBean>(() => new LogServerInfoBean());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogServerInfoBean> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.OkraAx.V3.BeanCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogServerInfoBean() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogServerInfoBean(LogServerInfoBean other) : this() {
      url_ = other.url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogServerInfoBean Clone() {
      return new LogServerInfoBean(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogServerInfoBean);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogServerInfoBean other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogServerInfoBean other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///   ReportClientLog接口
  /// </summary>
  public sealed partial class ReportClientLogBean : pb::IMessage<ReportClientLogBean> {
    private static readonly pb::MessageParser<ReportClientLogBean> _parser = new pb::MessageParser<ReportClientLogBean>(() => new ReportClientLogBean());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportClientLogBean> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.OkraAx.V3.BeanCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportClientLogBean() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportClientLogBean(ReportClientLogBean other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportClientLogBean Clone() {
      return new ReportClientLogBean(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.OkraAx.V3.ClientLogMessage> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Org.OkraAx.V3.ClientLogMessage.Parser);
    private readonly pbc::RepeatedField<global::Org.OkraAx.V3.ClientLogMessage> list_ = new pbc::RepeatedField<global::Org.OkraAx.V3.ClientLogMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.OkraAx.V3.ClientLogMessage> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportClientLogBean);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportClientLogBean other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportClientLogBean other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///   Client上报的日志. 用于分析客户端运行状况
  /// </summary>
  public sealed partial class ClientLogMessage : pb::IMessage<ClientLogMessage> {
    private static readonly pb::MessageParser<ClientLogMessage> _parser = new pb::MessageParser<ClientLogMessage>(() => new ClientLogMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientLogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.OkraAx.V3.BeanCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogMessage(ClientLogMessage other) : this() {
      context_ = other.context_.Clone();
      logLevel_ = other.logLevel_;
      message_ = other.message_;
      throwable_ = other.throwable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogMessage Clone() {
      return new ClientLogMessage(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_context_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> context_ = new pbc::MapField<string, string>();
    /// <summary>
    ///   携带的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Context {
      get { return context_; }
    }

    /// <summary>Field number for the "logLevel" field.</summary>
    public const int LogLevelFieldNumber = 2;
    private int logLevel_;
    /// <summary>
    ///   日志等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    ///   附加信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "throwable" field.</summary>
    public const int ThrowableFieldNumber = 4;
    private string throwable_ = "";
    /// <summary>
    ///   异常信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Throwable {
      get { return throwable_; }
      set {
        throwable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientLogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientLogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Context.Equals(other.Context)) return false;
      if (LogLevel != other.LogLevel) return false;
      if (Message != other.Message) return false;
      if (Throwable != other.Throwable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Context.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Throwable.Length != 0) hash ^= Throwable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      context_.WriteTo(output, _map_context_codec);
      if (LogLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LogLevel);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Throwable.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Throwable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += context_.CalculateSize(_map_context_codec);
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogLevel);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Throwable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Throwable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientLogMessage other) {
      if (other == null) {
        return;
      }
      context_.Add(other.context_);
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Throwable.Length != 0) {
        Throwable = other.Throwable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            context_.AddEntriesFrom(input, _map_context_codec);
            break;
          }
          case 16: {
            LogLevel = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Throwable = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
