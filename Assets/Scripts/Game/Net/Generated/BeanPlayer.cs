// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeanPlayer.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace Org.OkraAx.V3
{
    /// <summary>Holder for reflection information generated from BeanPlayer.proto</summary>
    public static partial class BeanPlayerReflection
    {
        #region Descriptor

        /// <summary>File descriptor for BeanPlayer.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static BeanPlayerReflection()
        {
            var descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "ChBCZWFuUGxheWVyLnByb3RvEg1vcmcub2tyYUF4LnYzIjsKDkJhc2VQbGF5",
                    "ZXJJbmZvEgsKA3VpZBgBIAEoAxIMCgRuYW1lGAIgASgJEg4KBmZpZ3VyZRgD",
                    "IAEoBSI+Cg5DcmVhdGVSb2xlQmVhbhIOCgZvcGVuSWQYASABKAkSDAoEbmFt",
                    "ZRgCIAEoCRIOCgZmaWd1cmUYAyABKAUiGwoJTG9naW5CZWFuEg4KBm9wZW5J",
                    "ZBgBIAEoCSIWCgdSZXRCZWFuEgsKA3JldBgBIAEoBSJGChZDYWxsYmFja0Ny",
                    "ZWF0ZVJvbGVCZWFuEg4KBm9wZW5JZBgBIAEoCRIMCgRuYW1lGAIgASgJEg4K",
                    "BmZpZ3VyZRgDIAEoBSIjChFDYWxsYmFja0xvZ2luQmVhbhIOCgZvcGVuSWQY",
                    "ASABKAkiEgoQQ2FsbGJhY2tTeW5jVGltZUItChpvcmcub2tyYUF4LnYzLmJl",
                    "YW5zLnBsYXllckILR3BjQm5QbGF5ZXJIAVABYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[]
                {
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.BasePlayerInfo),
                        global::Org.OkraAx.V3.BasePlayerInfo.Parser, new[] {"Uid", "Name", "Figure"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.CreateRoleBean),
                        global::Org.OkraAx.V3.CreateRoleBean.Parser, new[] {"OpenId", "Name", "Figure"}, null, null,
                        null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.LoginBean),
                        global::Org.OkraAx.V3.LoginBean.Parser, new[] {"OpenId"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.RetBean),
                        global::Org.OkraAx.V3.RetBean.Parser, new[] {"Ret"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.CallbackCreateRoleBean),
                        global::Org.OkraAx.V3.CallbackCreateRoleBean.Parser, new[] {"OpenId", "Name", "Figure"}, null,
                        null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.CallbackLoginBean),
                        global::Org.OkraAx.V3.CallbackLoginBean.Parser, new[] {"OpenId"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.CallbackSyncTime),
                        global::Org.OkraAx.V3.CallbackSyncTime.Parser, null, null, null, null)
                }));
        }

        #endregion
    }

    #region Messages

    /// <summary>
    ///     玩家基础信息
    /// </summary>
    public sealed partial class BasePlayerInfo : pb::IMessage<BasePlayerInfo>
    {
        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;

        /// <summary>Field number for the "figure" field.</summary>
        public const int FigureFieldNumber = 3;

        private static readonly pb::MessageParser<BasePlayerInfo> _parser =
            new pb::MessageParser<BasePlayerInfo>(() => new BasePlayerInfo());

        private int figure_;
        private string name_ = "";
        private long uid_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BasePlayerInfo()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BasePlayerInfo(BasePlayerInfo other) : this()
        {
            uid_ = other.uid_;
            name_ = other.name_;
            figure_ = other.figure_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BasePlayerInfo> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[0]; }
        }

        /// <summary>
        ///     玩家唯一ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Uid
        {
            get { return uid_; }
            set { uid_ = value; }
        }

        /// <summary>
        ///     角色名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set { name_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>
        ///     形象
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Figure
        {
            get { return figure_; }
            set { figure_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BasePlayerInfo Clone()
        {
            return new BasePlayerInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BasePlayerInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Uid != other.Uid) return false;
            if (Name != other.Name) return false;
            if (Figure != other.Figure) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Uid);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Figure != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Figure);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Uid != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Figure != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Figure);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BasePlayerInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Uid != 0L)
            {
                Uid = other.Uid;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Figure != 0)
            {
                Figure = other.Figure;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Uid = input.ReadInt64();
                        break;
                    }
                    case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        Figure = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BasePlayerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Uid != 0L) hash ^= Uid.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Figure != 0) hash ^= Figure.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     创建角色
    /// </summary>
    public sealed partial class CreateRoleBean : pb::IMessage<CreateRoleBean>
    {
        /// <summary>Field number for the "openId" field.</summary>
        public const int OpenIdFieldNumber = 1;

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;

        /// <summary>Field number for the "figure" field.</summary>
        public const int FigureFieldNumber = 3;

        private static readonly pb::MessageParser<CreateRoleBean> _parser =
            new pb::MessageParser<CreateRoleBean>(() => new CreateRoleBean());

        private int figure_;
        private string name_ = "";
        private string openId_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoleBean()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoleBean(CreateRoleBean other) : this()
        {
            openId_ = other.openId_;
            name_ = other.name_;
            figure_ = other.figure_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateRoleBean> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OpenId
        {
            get { return openId_; }
            set { openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set { name_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Figure
        {
            get { return figure_; }
            set { figure_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoleBean Clone()
        {
            return new CreateRoleBean(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateRoleBean other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OpenId != other.OpenId) return false;
            if (Name != other.Name) return false;
            if (Figure != other.Figure) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OpenId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(OpenId);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Figure != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Figure);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (OpenId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Figure != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Figure);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateRoleBean other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OpenId.Length != 0)
            {
                OpenId = other.OpenId;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Figure != 0)
            {
                Figure = other.Figure;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        OpenId = input.ReadString();
                        break;
                    }
                    case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        Figure = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CreateRoleBean);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Figure != 0) hash ^= Figure.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class LoginBean : pb::IMessage<LoginBean>
    {
        /// <summary>Field number for the "openId" field.</summary>
        public const int OpenIdFieldNumber = 1;

        private static readonly pb::MessageParser<LoginBean> _parser =
            new pb::MessageParser<LoginBean>(() => new LoginBean());

        private string openId_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginBean()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginBean(LoginBean other) : this()
        {
            openId_ = other.openId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoginBean> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OpenId
        {
            get { return openId_; }
            set { openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoginBean Clone()
        {
            return new LoginBean(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoginBean other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OpenId != other.OpenId) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OpenId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(OpenId);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (OpenId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoginBean other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OpenId.Length != 0)
            {
                OpenId = other.OpenId;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        OpenId = input.ReadString();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as LoginBean);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     callback
    ///     Simple callback bean
    /// </summary>
    public sealed partial class RetBean : pb::IMessage<RetBean>
    {
        /// <summary>Field number for the "ret" field.</summary>
        public const int RetFieldNumber = 1;

        private static readonly pb::MessageParser<RetBean> _parser =
            new pb::MessageParser<RetBean>(() => new RetBean());

        private int ret_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetBean()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetBean(RetBean other) : this()
        {
            ret_ = other.ret_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RetBean> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Ret
        {
            get { return ret_; }
            set { ret_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetBean Clone()
        {
            return new RetBean(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RetBean other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Ret != other.Ret) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Ret != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Ret);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Ret != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RetBean other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Ret != 0)
            {
                Ret = other.Ret;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Ret = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RetBean);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Ret != 0) hash ^= Ret.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class CallbackCreateRoleBean : pb::IMessage<CallbackCreateRoleBean>
    {
        /// <summary>Field number for the "openId" field.</summary>
        public const int OpenIdFieldNumber = 1;

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;

        /// <summary>Field number for the "figure" field.</summary>
        public const int FigureFieldNumber = 3;

        private static readonly pb::MessageParser<CallbackCreateRoleBean> _parser =
            new pb::MessageParser<CallbackCreateRoleBean>(() => new CallbackCreateRoleBean());

        private int figure_;
        private string name_ = "";
        private string openId_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackCreateRoleBean()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackCreateRoleBean(CallbackCreateRoleBean other) : this()
        {
            openId_ = other.openId_;
            name_ = other.name_;
            figure_ = other.figure_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CallbackCreateRoleBean> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OpenId
        {
            get { return openId_; }
            set { openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set { name_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Figure
        {
            get { return figure_; }
            set { figure_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackCreateRoleBean Clone()
        {
            return new CallbackCreateRoleBean(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CallbackCreateRoleBean other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OpenId != other.OpenId) return false;
            if (Name != other.Name) return false;
            if (Figure != other.Figure) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OpenId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(OpenId);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Figure != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Figure);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (OpenId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Figure != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Figure);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CallbackCreateRoleBean other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OpenId.Length != 0)
            {
                OpenId = other.OpenId;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Figure != 0)
            {
                Figure = other.Figure;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        OpenId = input.ReadString();
                        break;
                    }
                    case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        Figure = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CallbackCreateRoleBean);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Figure != 0) hash ^= Figure.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class CallbackLoginBean : pb::IMessage<CallbackLoginBean>
    {
        /// <summary>Field number for the "openId" field.</summary>
        public const int OpenIdFieldNumber = 1;

        private static readonly pb::MessageParser<CallbackLoginBean> _parser =
            new pb::MessageParser<CallbackLoginBean>(() => new CallbackLoginBean());

        private string openId_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackLoginBean()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackLoginBean(CallbackLoginBean other) : this()
        {
            openId_ = other.openId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CallbackLoginBean> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OpenId
        {
            get { return openId_; }
            set { openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackLoginBean Clone()
        {
            return new CallbackLoginBean(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CallbackLoginBean other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OpenId != other.OpenId) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OpenId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(OpenId);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (OpenId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CallbackLoginBean other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OpenId.Length != 0)
            {
                OpenId = other.OpenId;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        OpenId = input.ReadString();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CallbackLoginBean);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class CallbackSyncTime : pb::IMessage<CallbackSyncTime>
    {
        private static readonly pb::MessageParser<CallbackSyncTime> _parser =
            new pb::MessageParser<CallbackSyncTime>(() => new CallbackSyncTime());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackSyncTime()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackSyncTime(CallbackSyncTime other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CallbackSyncTime> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.BeanPlayerReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallbackSyncTime Clone()
        {
            return new CallbackSyncTime(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CallbackSyncTime other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CallbackSyncTime other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CallbackSyncTime);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    #endregion
}

#endregion Designer generated code