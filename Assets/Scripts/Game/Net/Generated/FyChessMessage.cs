// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FyChessMessage.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace Org.OkraAx.V3
{
    /// <summary>Holder for reflection information generated from FyChessMessage.proto</summary>
    public static partial class FyChessMessageReflection
    {
        #region Descriptor

        /// <summary>File descriptor for FyChessMessage.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static FyChessMessageReflection()
        {
            var descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "ChRGeUNoZXNzTWVzc2FnZS5wcm90bxINb3JnLm9rcmFBeC52MyJGCgxNc2dD",
                    "aGVzc01vdmUSDQoFZnJvbVgYASABKAUSDQoFZnJvbVkYAiABKAUSCwoDdG9Y",
                    "GAMgASgFEgsKA3RvWRgEIAEoBSIsCgxSZXFDaGVzc0pvaW4SDAoEbmFtZRgB",
                    "IAEoCRIOCgZyb29tSWQYAiABKAMiHAoMUmVzQ2hlc3NKb2luEgwKBHNpZGUY",
                    "ASABKAUiHwoMUmVzQ2hlc3NNb3ZlEg8KB21vdmFibGUYASABKAgiEgoQUmVx",
                    "Q2hlc3NSb29tSW5mbyJ0ChBSZXNDaGVzc1Jvb21JbmZvEjcKBWluZm9zGAEg",
                    "AygLMigub3JnLm9rcmFBeC52My5SZXNDaGVzc1Jvb21JbmZvLlJvb21JbmZv",
                    "GicKCFJvb21JbmZvEgoKAmlkGAEgASgFEg8KB3BsYXllcnMYAiADKAkiRwoN",
                    "UHVzaENoZXNzTW92ZRINCgVmcm9tWBgBIAEoBRINCgVmcm9tWRgCIAEoBRIL",
                    "CgN0b1gYAyABKAUSCwoDdG9ZGAQgASgFIhoKClB1c2hSZXBvcnQSDAoEc2lk",
                    "ZRgBIAEoBSIPCg1QdXNoQ2hlc3NJbml0QioKGW9yZy5va3JhQXgudjMuY2hl",
                    "c3MuYmVhbnNCCUZ5Q2hlc3NNaUgBUAFiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[]
                {
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.MsgChessMove),
                        global::Org.OkraAx.V3.MsgChessMove.Parser, new[] {"FromX", "FromY", "ToX", "ToY"}, null, null,
                        null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ReqChessJoin),
                        global::Org.OkraAx.V3.ReqChessJoin.Parser, new[] {"Name", "RoomId"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ResChessJoin),
                        global::Org.OkraAx.V3.ResChessJoin.Parser, new[] {"Side"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ResChessMove),
                        global::Org.OkraAx.V3.ResChessMove.Parser, new[] {"Movable"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ReqChessRoomInfo),
                        global::Org.OkraAx.V3.ReqChessRoomInfo.Parser, null, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ResChessRoomInfo),
                        global::Org.OkraAx.V3.ResChessRoomInfo.Parser, new[] {"Infos"}, null, null,
                        new pbr::GeneratedClrTypeInfo[]
                        {
                            new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo),
                                global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo.Parser, new[] {"Id", "Players"},
                                null, null, null)
                        }),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.PushChessMove),
                        global::Org.OkraAx.V3.PushChessMove.Parser, new[] {"FromX", "FromY", "ToX", "ToY"}, null, null,
                        null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.PushReport),
                        global::Org.OkraAx.V3.PushReport.Parser, new[] {"Side"}, null, null, null),
                    new pbr::GeneratedClrTypeInfo(typeof(global::Org.OkraAx.V3.PushChessInit),
                        global::Org.OkraAx.V3.PushChessInit.Parser, null, null, null, null)
                }));
        }

        #endregion
    }

    #region Messages

    /// <summary>
    ///     移动棋子
    /// </summary>
    public sealed partial class MsgChessMove : pb::IMessage<MsgChessMove>
    {
        /// <summary>Field number for the "fromX" field.</summary>
        public const int FromXFieldNumber = 1;

        /// <summary>Field number for the "fromY" field.</summary>
        public const int FromYFieldNumber = 2;

        /// <summary>Field number for the "toX" field.</summary>
        public const int ToXFieldNumber = 3;

        /// <summary>Field number for the "toY" field.</summary>
        public const int ToYFieldNumber = 4;

        private static readonly pb::MessageParser<MsgChessMove> _parser =
            new pb::MessageParser<MsgChessMove>(() => new MsgChessMove());

        private int fromX_;
        private int fromY_;
        private int toX_;
        private int toY_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgChessMove()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgChessMove(MsgChessMove other) : this()
        {
            fromX_ = other.fromX_;
            fromY_ = other.fromY_;
            toX_ = other.toX_;
            toY_ = other.toY_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MsgChessMove> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[0]; }
        }

        /// <summary>
        ///     移动前x坐标轴
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FromX
        {
            get { return fromX_; }
            set { fromX_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FromY
        {
            get { return fromY_; }
            set { fromY_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ToX
        {
            get { return toX_; }
            set { toX_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ToY
        {
            get { return toY_; }
            set { toY_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgChessMove Clone()
        {
            return new MsgChessMove(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MsgChessMove other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (FromX != other.FromX) return false;
            if (FromY != other.FromY) return false;
            if (ToX != other.ToX) return false;
            if (ToY != other.ToY) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (FromX != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(FromX);
            }
            if (FromY != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(FromY);
            }
            if (ToX != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ToX);
            }
            if (ToY != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ToY);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (FromX != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromX);
            }
            if (FromY != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromY);
            }
            if (ToX != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
            }
            if (ToY != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MsgChessMove other)
        {
            if (other == null)
            {
                return;
            }
            if (other.FromX != 0)
            {
                FromX = other.FromX;
            }
            if (other.FromY != 0)
            {
                FromY = other.FromY;
            }
            if (other.ToX != 0)
            {
                ToX = other.ToX;
            }
            if (other.ToY != 0)
            {
                ToY = other.ToY;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        FromX = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        FromY = input.ReadInt32();
                        break;
                    }
                    case 24:
                    {
                        ToX = input.ReadInt32();
                        break;
                    }
                    case 32:
                    {
                        ToY = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MsgChessMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (FromX != 0) hash ^= FromX.GetHashCode();
            if (FromY != 0) hash ^= FromY.GetHashCode();
            if (ToX != 0) hash ^= ToX.GetHashCode();
            if (ToY != 0) hash ^= ToY.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     [api:1000] - 请求加入棋局
    /// </summary>
    public sealed partial class ReqChessJoin : pb::IMessage<ReqChessJoin>
    {
        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;

        /// <summary>Field number for the "roomId" field.</summary>
        public const int RoomIdFieldNumber = 2;

        private static readonly pb::MessageParser<ReqChessJoin> _parser =
            new pb::MessageParser<ReqChessJoin>(() => new ReqChessJoin());

        private string name_ = "";
        private long roomId_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessJoin()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessJoin(ReqChessJoin other) : this()
        {
            name_ = other.name_;
            roomId_ = other.roomId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReqChessJoin> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[1]; }
        }

        /// <summary>
        ///     昵称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set { name_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        /// <summary>
        ///     房间唯一ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RoomId
        {
            get { return roomId_; }
            set { roomId_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessJoin Clone()
        {
            return new ReqChessJoin(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReqChessJoin other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (RoomId != other.RoomId) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (RoomId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(RoomId);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (RoomId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReqChessJoin other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.RoomId != 0L)
            {
                RoomId = other.RoomId;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Name = input.ReadString();
                        break;
                    }
                    case 16:
                    {
                        RoomId = input.ReadInt64();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ReqChessJoin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (RoomId != 0L) hash ^= RoomId.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     响应加入棋局
    /// </summary>
    public sealed partial class ResChessJoin : pb::IMessage<ResChessJoin>
    {
        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 1;

        private static readonly pb::MessageParser<ResChessJoin> _parser =
            new pb::MessageParser<ResChessJoin>(() => new ResChessJoin());

        private int side_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessJoin()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessJoin(ResChessJoin other) : this()
        {
            side_ = other.side_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResChessJoin> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[2]; }
        }

        /// <summary>
        ///     阵营
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Side
        {
            get { return side_; }
            set { side_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessJoin Clone()
        {
            return new ResChessJoin(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResChessJoin other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Side != other.Side) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Side != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Side);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Side != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResChessJoin other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Side != 0)
            {
                Side = other.Side;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Side = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResChessJoin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Side != 0) hash ^= Side.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     响应棋子移动
    /// </summary>
    public sealed partial class ResChessMove : pb::IMessage<ResChessMove>
    {
        /// <summary>Field number for the "movable" field.</summary>
        public const int MovableFieldNumber = 1;

        private static readonly pb::MessageParser<ResChessMove> _parser =
            new pb::MessageParser<ResChessMove>(() => new ResChessMove());

        private bool movable_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessMove()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessMove(ResChessMove other) : this()
        {
            movable_ = other.movable_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResChessMove> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[3]; }
        }

        /// <summary>
        ///     是否可以移动
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Movable
        {
            get { return movable_; }
            set { movable_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessMove Clone()
        {
            return new ResChessMove(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResChessMove other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Movable != other.Movable) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Movable != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(Movable);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Movable != false)
            {
                size += 1 + 1;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResChessMove other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Movable != false)
            {
                Movable = other.Movable;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Movable = input.ReadBool();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResChessMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Movable != false) hash ^= Movable.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     [api:1002] - 获取房间信息
    /// </summary>
    public sealed partial class ReqChessRoomInfo : pb::IMessage<ReqChessRoomInfo>
    {
        private static readonly pb::MessageParser<ReqChessRoomInfo> _parser =
            new pb::MessageParser<ReqChessRoomInfo>(() => new ReqChessRoomInfo());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessRoomInfo()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessRoomInfo(ReqChessRoomInfo other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReqChessRoomInfo> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReqChessRoomInfo Clone()
        {
            return new ReqChessRoomInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReqChessRoomInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReqChessRoomInfo other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ReqChessRoomInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     响应获取房间列表
    /// </summary>
    public sealed partial class ResChessRoomInfo : pb::IMessage<ResChessRoomInfo>
    {
        /// <summary>Field number for the "infos" field.</summary>
        public const int InfosFieldNumber = 1;

        private static readonly pb::MessageParser<ResChessRoomInfo> _parser =
            new pb::MessageParser<ResChessRoomInfo>(() => new ResChessRoomInfo());

        private static readonly pb::FieldCodec<global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo>
            _repeated_infos_codec
                = pb::FieldCodec.ForMessage(10, global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo.Parser);

        private readonly pbc::RepeatedField<global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo> infos_ =
            new pbc::RepeatedField<global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessRoomInfo()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessRoomInfo(ResChessRoomInfo other) : this()
        {
            infos_ = other.infos_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResChessRoomInfo> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Org.OkraAx.V3.ResChessRoomInfo.Types.RoomInfo> Infos
        {
            get { return infos_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResChessRoomInfo Clone()
        {
            return new ResChessRoomInfo(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResChessRoomInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!infos_.Equals(other.infos_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            infos_.WriteTo(output, _repeated_infos_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            size += infos_.CalculateSize(_repeated_infos_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResChessRoomInfo other)
        {
            if (other == null)
            {
                return;
            }
            infos_.Add(other.infos_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        infos_.AddEntriesFrom(input, _repeated_infos_codec);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResChessRoomInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            hash ^= infos_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        #region Nested types

        /// <summary>Container for nested types declared in the ResChessRoomInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class RoomInfo : pb::IMessage<RoomInfo>
            {
                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;

                /// <summary>Field number for the "players" field.</summary>
                public const int PlayersFieldNumber = 2;

                private static readonly pb::MessageParser<RoomInfo> _parser =
                    new pb::MessageParser<RoomInfo>(() => new RoomInfo());

                private static readonly pb::FieldCodec<string> _repeated_players_codec
                    = pb::FieldCodec.ForString(18);

                private readonly pbc::RepeatedField<string> players_ = new pbc::RepeatedField<string>();
                private int id_;

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RoomInfo()
                {
                    OnConstruction();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RoomInfo(RoomInfo other) : this()
                {
                    id_ = other.id_;
                    players_ = other.players_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RoomInfo> Parser
                {
                    get { return _parser; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Org.OkraAx.V3.ResChessRoomInfo.Descriptor.NestedTypes[0]; }
                }

                /// <summary>
                ///     房间ID
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Id
                {
                    get { return id_; }
                    set { id_ = value; }
                }

                /// <summary>
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> Players
                {
                    get { return players_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RoomInfo Clone()
                {
                    return new RoomInfo(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RoomInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (!players_.Equals(other.players_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(Id);
                    }
                    players_.WriteTo(output, _repeated_players_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    var size = 0;
                    if (Id != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
                    }
                    size += players_.CalculateSize(_repeated_players_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RoomInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id != 0)
                    {
                        Id = other.Id;
                    }
                    players_.Add(other.players_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                            {
                                Id = input.ReadInt32();
                                break;
                            }
                            case 18:
                            {
                                players_.AddEntriesFrom(input, _repeated_players_codec);
                                break;
                            }
                        }
                    }
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as RoomInfo);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    var hash = 1;
                    if (Id != 0) hash ^= Id.GetHashCode();
                    hash ^= players_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }
            }
        }

        #endregion
    }

    /// <summary>
    ///     [push:101] - 推送棋子移动
    /// </summary>
    public sealed partial class PushChessMove : pb::IMessage<PushChessMove>
    {
        /// <summary>Field number for the "fromX" field.</summary>
        public const int FromXFieldNumber = 1;

        /// <summary>Field number for the "fromY" field.</summary>
        public const int FromYFieldNumber = 2;

        /// <summary>Field number for the "toX" field.</summary>
        public const int ToXFieldNumber = 3;

        /// <summary>Field number for the "toY" field.</summary>
        public const int ToYFieldNumber = 4;

        private static readonly pb::MessageParser<PushChessMove> _parser =
            new pb::MessageParser<PushChessMove>(() => new PushChessMove());

        private int fromX_;
        private int fromY_;
        private int toX_;
        private int toY_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessMove()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessMove(PushChessMove other) : this()
        {
            fromX_ = other.fromX_;
            fromY_ = other.fromY_;
            toX_ = other.toX_;
            toY_ = other.toY_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PushChessMove> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FromX
        {
            get { return fromX_; }
            set { fromX_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FromY
        {
            get { return fromY_; }
            set { fromY_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ToX
        {
            get { return toX_; }
            set { toX_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ToY
        {
            get { return toY_; }
            set { toY_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessMove Clone()
        {
            return new PushChessMove(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PushChessMove other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (FromX != other.FromX) return false;
            if (FromY != other.FromY) return false;
            if (ToX != other.ToX) return false;
            if (ToY != other.ToY) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (FromX != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(FromX);
            }
            if (FromY != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(FromY);
            }
            if (ToX != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ToX);
            }
            if (ToY != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ToY);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (FromX != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromX);
            }
            if (FromY != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromY);
            }
            if (ToX != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
            }
            if (ToY != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PushChessMove other)
        {
            if (other == null)
            {
                return;
            }
            if (other.FromX != 0)
            {
                FromX = other.FromX;
            }
            if (other.FromY != 0)
            {
                FromY = other.FromY;
            }
            if (other.ToX != 0)
            {
                ToX = other.ToX;
            }
            if (other.ToY != 0)
            {
                ToY = other.ToY;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        FromX = input.ReadInt32();
                        break;
                    }
                    case 16:
                    {
                        FromY = input.ReadInt32();
                        break;
                    }
                    case 24:
                    {
                        ToX = input.ReadInt32();
                        break;
                    }
                    case 32:
                    {
                        ToY = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PushChessMove);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (FromX != 0) hash ^= FromX.GetHashCode();
            if (FromY != 0) hash ^= FromY.GetHashCode();
            if (ToX != 0) hash ^= ToX.GetHashCode();
            if (ToY != 0) hash ^= ToY.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     [push:102] - 推送胜负
    /// </summary>
    public sealed partial class PushReport : pb::IMessage<PushReport>
    {
        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 1;

        private static readonly pb::MessageParser<PushReport> _parser =
            new pb::MessageParser<PushReport>(() => new PushReport());

        private int side_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushReport()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushReport(PushReport other) : this()
        {
            side_ = other.side_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PushReport> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[7]; }
        }

        /// <summary>
        ///     胜利方
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Side
        {
            get { return side_; }
            set { side_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushReport Clone()
        {
            return new PushReport(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PushReport other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Side != other.Side) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Side != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Side);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            if (Side != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PushReport other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Side != 0)
            {
                Side = other.Side;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Side = input.ReadInt32();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PushReport);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            if (Side != 0) hash ^= Side.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    /// <summary>
    ///     [push:103] - 推送房间初始化
    /// </summary>
    public sealed partial class PushChessInit : pb::IMessage<PushChessInit>
    {
        private static readonly pb::MessageParser<PushChessInit> _parser =
            new pb::MessageParser<PushChessInit>(() => new PushChessInit());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessInit()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessInit(PushChessInit other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PushChessInit> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Org.OkraAx.V3.FyChessMessageReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushChessInit Clone()
        {
            return new PushChessInit(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PushChessInit other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            var size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PushChessInit other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PushChessInit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            var hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }
    }

    #endregion
}

#endregion Designer generated code